#----------------------------------------------------------------------------------------------#
#                                       Auxiliary Items                                        #
#----------------------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------------------#
#                                        unvarSerF{๐ก,๐ฉ}                                        #
#----------------------------------------------------------------------------------------------#

"""
`struct unvarSerF{๐ก,๐ฉ} <: AuxFunc where {๐ก<:PREC,๐ฉ<:EXAC}`

Precision- and Exactness- parameterized, scalar-valued, dimensionless, `<:AbstractFloat`,
univariate, series function type with explicit compact (bounded / interval) domain support.

Depending on the Exactness parameter, *both* function domain and codomain elements are uniformly
of type `๐ก where {๐ก<:PREC}`, for `๐ฉ โก EX` โ the Exact base; or `Measurement{๐ก} where {๐ก<:PREC}`,
for `๐ฉ โก MM` โ the Measurement base.

Data members include:

    - `xmin::Union{๐ก, Measurement{๐ก}} where ๐ก<:PREC`: the domain support interval inferior endpoint;
    - `xmax::Union{๐ก, Measurement{๐ก}} where ๐ก<:PREC`: the domain support interval superior endpoint;
    - `fvec::Vector{Function}`: the variable collection of function additive terms;
    - `mulf::Union{๐ก, Measurement{๐ก}} where ๐ก<:PREC`: the multiplicative factor, for %error;

The inner constructors enforce the following standards/restrictions:

    - No input value `{xmin,xmax}` shall be a NaN;
    - `xmin <= xmax`;
    - `fvec` must not be empty.

Instances of `unvarSerF` are `functors`, meaning they can be used as functions (as expected).
The functor implementation enforce the following standard: if `๐::unvarSerF{๐ก,๐ฉ} ...`, then:

    - `๐{๐ก,EX}(๐ฅ)::๐ก where ๐ก<:PREC`, meaning the return type precision is `EX`;
    - `๐{๐ก,MM}(๐ฅ)::Measurement{๐ก} where ๐ก<:PREC`, meaning the return type precision is `MM`;

## Hierarchy

`$(tyArchy(unvarSerF))`\n
"""
struct unvarSerF{๐ก,๐ฉ} <: AuxFunc where {๐ก<:PREC,๐ฉ<:EXAC}
    xmin::plnF{๐ก}   # Plain, unitless floats: (โ Union{๐ก, Measurement{๐ก}} where ๐ก<:PREC)
    xmax::plnF{๐ก}
    fvec::Vector{Function}
    mulf::plnF{๐ก}
    unvarSerF(amin::๐ก, amax::๐ก, funv::Vector{<:Function}) where {๐ก<:PREC} = begin
        @assert !isnan(amin)
        @assert !isnan(amax)
        @assert amin <= amax
        @assert length(funv) > 0
        new{๐ก,EX}(amin, amax, funv, one(๐ก))
    end
    unvarSerF(amin::plnF{๐ก}, amax::plnF{๐ก}, funv::Vector{<:Function}, ัerr::๐ก) where {๐ก<:PREC} = begin
        @assert !isnan(amin)
        @assert !isnan(amax)
        @assert amin <= amax
        @assert length(funv) > 0
        @assert !isnan(ัerr)
        new{๐ก,MM}(amin, amax, funv, one(๐ก) ยฑ (ัerr * ๐ก(1.0e-2)))
    end
end


#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#
#                                           Functors                                           #
#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#

(F::unvarSerF{๐ก,EX})(x::Union{REAL,plnF{๐ข}}) where {๐ก<:PREC,๐ข<:PREC} = begin
    @assert !isnan(x)
    @assert F.xmin <= x <= F.xmax
    return bare(รธ_amt{๐ก,EX}(reduce(+, [๐(x) for ๐ in F.fvec])))
end

(F::unvarSerF{๐ก,MM})(x::Union{REAL,plnF{๐ข}}) where {๐ก<:PREC,๐ข<:PREC} = begin
    @assert !isnan(x)
    @assert F.xmin <= x <= F.xmax
    return bare(รธ_amt{๐ก,MM}(reduce(+, [๐(x) for ๐ in F.fvec]) * F.mulf))
end

export unvarSerF


#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#
#                                         Pretty-Print                                         #
#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#

# Custom printing
Base.show(io::IO, ๐::unvarSerF{๐ก,EX}) where ๐ก<:PREC = begin
    if DEF[:pprint]
        print(io,
            "$(length(๐.fvec))-term ๐$(pDeco(๐ก))(๐ฅ โ [$(valFmt(๐.xmin)); $(valFmt(๐.xmax))])",
        )
    else
        print(io,
            "$(typeof(๐))(๐ฅ)",
        )
    end
end

Base.show(io::IO, ๐::unvarSerF{๐ก,MM}) where ๐ก<:PREC = begin
    if DEF[:pprint]
        print(io,
            "$(length(๐.fvec))โดterm ๐$(pDeco(๐ก))(๐ฅ โ [$(valFmt(๐.xmin)); $(valFmt(๐.xmax))])",
        )
    else
        print(io,
            "$(typeof(๐))(๐ฅ)",
        )
    end
end


#----------------------------------------------------------------------------------------------#
#                                     unvarSerF Factories                                      #
#----------------------------------------------------------------------------------------------#

#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#
#                                         Derivatives                                          #
#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#

using ForwardDiff

function ddx(๐::unvarSerF{๐ก,EX})::unvarSerF{๐ก,EX} where ๐ก<:PREC
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->ForwardDiff.derivative(fi, x) for fi in ๐.fvec ]
    )
end

function ddx(๐::unvarSerF{๐ก,MM})::unvarSerF{๐ก,MM} where ๐ก<:PREC
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->ForwardDiff.derivative(fi, x) for fi in ๐.fvec ],
        ๐.mulf.err / ๐ก(1.0e-2)
    )
end

export ddx


#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#
#                                          Integrals                                           #
#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#

using QuadGK

function โซdx(๐::unvarSerF{๐ก,EX},
             xref::plnF{๐ก}=๐.xmin,
             yref::plnF{๐ก}=zero(๐ก))::unvarSerF{๐ก,EX} where ๐ก<:PREC
    ๐ = bare(รธ_amt{๐ก,EX}(xref))
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->yref, [x->quadgk(fi, ๐, x)[1] for fi in ๐.fvec]...]
    )
end

function โซdx(๐::unvarSerF{๐ก,MM},
             xref::plnF{๐ก}=๐.xmin,
             yref::plnF{๐ก}=zero(๐ก))::unvarSerF{๐ก,MM} where ๐ก<:PREC
    ๐ = bare(รธ_amt{๐ก,MM}(xref))
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->yref, [
                x->(
                    (i, e) = bare.(รธ_amt{๐ก,MM}.(quadgk(fi, ๐, x)));
                    (i.val ยฑ โ(i.err^2 + e.val^2))
                ) for fi in ๐.fvec
            ]...
        ],
        ๐.mulf.err / ๐ก(1.0e-2)
    )
end

function โซdlnx(๐::unvarSerF{๐ก,EX},
               xref::plnF{๐ก}=๐.xmin,
               yref::plnF{๐ก}=zero(๐ก))::unvarSerF{๐ก,EX} where ๐ก<:PREC
    ๐ = bare(รธ_amt{๐ก,EX}(xref))
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->yref, [x->quadgk(๐ฅ->fi(๐ฅ)/๐ฅ, ๐, x)[1] for fi in ๐.fvec]...]
    )
end

function โซdlnx(๐::unvarSerF{๐ก,MM},
               xref::plnF{๐ก}=๐.xmin,
               yref::plnF{๐ก}=zero(๐ก))::unvarSerF{๐ก,MM} where ๐ก<:PREC
    ๐ = bare(รธ_amt{๐ก,MM}(xref))
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->yref, [
                x->(
                    (i, e) = bare.(รธ_amt{๐ก,MM}.(quadgk(๐ฅ->fi(๐ฅ)/๐ฅ, ๐, x)));
                    (i.val ยฑ โ(i.err^2 + e.val^2))
                ) for fi in ๐.fvec
            ]...
        ],
        ๐.mulf.err / ๐ก(1.0e-2)
    )
end

export โซdx, โซdlnx


#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#
#                                   Add / Sub by a constant                                    #
#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#

(+(๐::Union{REAL, ๐ข}, ๐::unvarSerF{๐ก,EX})::unvarSerF{๐ก,EX}) where {๐ก<:PREC,๐ข<:PREC} = begin
    ๐ = ๐ก(๐)
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->๐, ๐.fvec...]
    )
end

(+(๐::Measurement{๐ข}, ๐::unvarSerF{๐ก,EX})::unvarSerF{๐ก,EX}) where {๐ก<:PREC,๐ข<:PREC} = begin
    ๐ = ๐ก(๐.val)
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->๐, ๐.fvec...]
    )
end

(+(๐::Union{REAL, ๐ข}, ๐::unvarSerF{๐ก,MM})::unvarSerF{๐ก,MM}) where {๐ก<:PREC,๐ข<:PREC} = begin
    ๐ = bare(รธ_amt{๐ก,MM}(๐))
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->๐, ๐.fvec...],
        ๐.mulf.err / ๐ก(1.0e-2)
    )
end

(+(๐::Measurement{๐ข}, ๐::unvarSerF{๐ก,MM})::unvarSerF{๐ก,MM}) where {๐ก<:PREC,๐ข<:PREC} = begin
    ๐ = Measurement{๐ก}(๐)
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[x->๐, ๐.fvec...],
        ๐.mulf.err / ๐ก(1.0e-2)
    )
end

+(๐::unvarSerF{๐ก,๐ฉ}, ๐::Union{REAL,plnF{๐ข}}) where {๐ก<:PREC,๐ข<:PREC,๐ฉ<:EXAC} = +(๐, ๐) # Fallback

-(๐::unvarSerF{๐ก,EX}) where ๐ก<:PREC = begin
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[[x->(-fi(x)) for fi in ๐.fvec]...]
    )
end

-(๐::unvarSerF{๐ก,MM}) where ๐ก<:PREC = begin
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[[x->(-fi(x)) for fi in ๐.fvec]...],
        ๐.mulf.err / ๐ก(1.0e-2)
    )
end

# Fallback methods
-(๐::unvarSerF{๐ก,๐ฉ}, ๐::Union{REAL,plnF{๐ข}}) where {๐ก<:PREC,๐ข<:PREC,๐ฉ<:EXAC} = +(-๐, ๐)

-(๐::Union{REAL,plnF{๐ข}}, ๐::unvarSerF{๐ก,๐ฉ}) where {๐ก<:PREC,๐ข<:PREC,๐ฉ<:EXAC} = +(๐, -๐)


#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#
#                                   Mul / Div by a constant                                    #
#ยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยทยท#

(*(๐::Union{REAL, ๐ข}, ๐::unvarSerF{๐ก,EX})::unvarSerF{๐ก,EX}) where {๐ก<:PREC,๐ข<:PREC} = begin
    ๐ = ๐ก(๐)
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[[x->(fi(x)*๐) for fi in ๐.fvec]...]
    )
end

(*(๐::Measurement{๐ข}, ๐::unvarSerF{๐ก,EX})::unvarSerF{๐ก,EX}) where {๐ก<:PREC,๐ข<:PREC} = begin
    ๐ = Measurement{๐ก}(๐).val
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[[x->(fi(x)*๐) for fi in ๐.fvec]...]
    )
end

(*(๐::Union{REAL, ๐ข}, ๐::unvarSerF{๐ก,MM})::unvarSerF{๐ก,MM}) where {๐ก<:PREC,๐ข<:PREC} = begin
    ๐ = ๐ก(๐)
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[[x->(fi(x)*๐) for fi in ๐.fvec]...],
        ๐.mulf.err / ๐ก(1.0e-2)
    )
end

(*(๐::Measurement{๐ข}, ๐::unvarSerF{๐ก,MM})::unvarSerF{๐ก,MM}) where {๐ก<:PREC,๐ข<:PREC} = begin
    ๐ = Measurement{๐ก}(๐)
    return unvarSerF(
        ๐.xmin,
        ๐.xmax,
        Function[[x->(fi(x)*๐) for fi in ๐.fvec]...],
        ๐.mulf.err / ๐ก(1.0e-2)
    )
end

# Fallback methods
*(๐::unvarSerF{๐ก,๐ฉ}, ๐::Union{REAL,plnF{๐ข}}) where {๐ก<:PREC,๐ข<:PREC,๐ฉ<:EXAC} = *(๐, ๐)

/(๐::unvarSerF{๐ก,๐ฉ}, ๐::Union{REAL,plnF{๐ข}}) where {๐ก<:PREC,๐ข<:PREC,๐ฉ<:EXAC} = *(inv(๐), ๐)


#----------------------------------------------------------------------------------------------#
#                             Other Functions involving unvarSerF                              #
#----------------------------------------------------------------------------------------------#



